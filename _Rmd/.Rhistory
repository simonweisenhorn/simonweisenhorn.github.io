rmarkdown::render(input = '2023-06-25-third-blog-post.Rmd',
output_format = "github_document",
output_options = list(html_preview=FALSE)
rmarkdown::render(output_format = "github_document", output_dir="../_posts"
rmarkdown::render(output_format = "github_document", output_dir="../_posts", output_options = list(html_preview=FALSE))
rmarkdown::render(input='2023-06-25-third-blog-post.Rmd', output_format = "github_document", output_dir="../_posts", output_options = list(html_preview=FALSE))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
iris
iris = iris %>% filter(Species == c("setosa", "versicolor"))
iris
library(tidyverse)
iris
iris = iris %>% filter(Species == -c("setosa", "versicolor"))
library(tidyverse)
iris
iris = iris %>% filter(Species != c("setosa", "versicolor"))
iris
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
iris
iris2 = iris %>% filter(Species != c("setosa", "versicolor"))
iris2
library(tidyverse)
iris
iris2 = iris %>% filter(Species != c("setosa", "versicolor"))
iris2
library(tidyverse)
iris
iris = iris %>% filter(Species != c("setosa", "versicolor"))
iris
library(tidyverse)
iris <- iris %>% filter(Species != c("setosa", "versicolor")) %>% mutate(setosa_indicator = case_when("setosa" ~ 1))
library(tidyverse)
iris <- iris %>% filter(Species != c("setosa", "versicolor")) %>% mutate(setosa_indicator = case_when(Species == "setosa" ~ 1))
iris
library(tidyverse)
iris <- iris %>% filter(Species != c("setosa", "versicolor")) %>% mutate(setosa_indicator = case_when(Species == "setosa" ~ 1,
Species == "virginica" ~ 0))
iris
library(tidyverse)
iris <- iris %>% filter(Species != c("setosa", "versicolor")) %>% mutate(setosa_indicator = case_when(Species == "setosa" ~ 1,
Species == "virginica" ~ 0))
iris$setosa_indicator <- as.factor(setosa_indicator)
library(tidyverse)
iris <- iris %>% filter(Species != c("setosa", "versicolor")) %>% mutate(setosa_indicator = case_when(Species == "setosa" ~ 1,
Species == "virginica" ~ 0))
iris$setosa_indicator <- as.factor(iris$setosa_indicator)
iris
library(tidyverse)
iris <- iris %>% filter(Species != c("setosa", "versicolor")) %>% mutate(setosa_indicator = case_when(Species == "setosa" ~ 1,
Species == "virginica" ~ 0))
iris$setosa_indicator <- as.factor(iris$setosa_indicator)
iris
library(datasets)
quakes
library(datasets)
rock
library(datasets)
titanic
library(datasets)
Titanic
library(datasets)
Titanic
library(datasets)
data.frame(Titanic)
library(datasets)
Titanic = data.frame(Titanic)
Titanic = uncount(Titanic, weights=Freq)
Titanic
library(datasets)
Titanic = data.frame(Titanic)
Titanic = uncount(Titanic, weights=Freq)
library(datasets)
Titanic = data.frame(Titanic)
Titanic = uncount(Titanic, weights=Freq)
tail(Titanic)
library(datasets)
Titanic = data.frame(Titanic)
Titanic = uncount(Titanic, weights=Freq)
library(datasets)
Titanic = data.frame(Titanic)
Titanic = uncount(Titanic, weights=Freq)
Titanic
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(datasets)
Titanic <- data.frame(Titanic)
Titanic <- uncount(Titanic, weights=Freq)
set.seed(558) #setting seed for reproducibility
trainIndex <- createDataPartition(Titanic$Survived, p = 0.75,
list = FALSE)
library(tidyverse)
library(datasets)
library(caret)
Titanic <- data.frame(Titanic)
Titanic <- uncount(Titanic, weights=Freq)
library(tidyverse)
library(datasets)
library(caret)
Titanic <- data.frame(Titanic)
Titanic <- uncount(Titanic, weights=Freq)
set.seed(558) #setting seed for reproducibility
trainIndex <- createDataPartition(Titanic$Survived, p = 0.75,
list = FALSE)
#Creating indexes for training data
TitanicTrain <- Titanic[trainIndex, ] #Creating training dataset
TitanicTest <- Titanic[-trainIndex, ] #Creating testing dataset
library(gbm) #Needed this library to run the training function
allTuningParameters <- expand.grid(n.trees=c(25,50,100,150,200), interaction.depth=c(1,2,3,4), shrinkage=0.1, n.minobsinnode = 10)
#Creating dataframe for the tuneGrid arguement using expand.grid
boostTreeFit <- train(Survived ~ ., data = TitanicTrain,
method = "gbm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv",
number = 5, repeats=3),
tuneGrid=allTuningParameters)
#Fitting the boosted tree model
boostTreeFit
#viewing the resulting model
library(gbm) #Needed this library to run the training function
allTuningParameters <- expand.grid(n.trees=c(25,50,100,150,200), interaction.depth=c(1,2,3,4), shrinkage=0.1, n.minobsinnode = 10)
#Creating dataframe for the tuneGrid arguement using expand.grid
boostTreeFit <- train(Survived ~ ., data = TitanicTrain,
method = "gbm",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv",
number = 5, repeats=3),
tuneGrid=allTuningParameters,
verbose=FALSE)
#Fitting the boosted tree model
boostTreeFit
#viewing the resulting model
confusionMatrix(data = TitanicTest$Survived,
reference = predict(boostTreeFit, newdata = TitanicTest))
#checking how well the model does on the test set using the confusionMatrix
#function
View(Titanic)
